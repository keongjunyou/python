1. 불변 객체(Immutable Objects)와 가변 객체(Mutable Objects)의 Python 인자 전달 방식 차이에 대한 이해
차이점을 확인할 수 있는 코드를 작성

Primitive Type 전달 후 값 변경 케이스

Reference Type 전달 후 값 변경 케이스

Reference Type 전달 후 새롭게 인스턴스화 했을 경우에 대한 케이스



2. 다른 프로그래밍 언어와의 차이점
Call By Value vs Call By Object Reference



3. Python의 인자 전달 방식 Call by Object Reference이란?
ppt로 해당 내용을 그림으로 그려보고 다른 개발자에게 설명



4. 객체의 복사 (pickle 라이브러리)
얉은 복사 (Shallow Copy)와 깊은 복사 (Deep Copy)에 대해 이해하고,
pickle 라이브러리를 이용하여 직렬화와 역직렬화 코드를 직접 작성
그 후 엔진에 있는 직렬화와 역직렬화에 대해서 확인하고 이해 합니다. (pickle, dill)



5. 변수 범위와 수명 (Variable Scope and Lifetime)
어떨 때 지역변수와 전역변수를 사용해야 하는지 이해하고 전역 변수에 해당되는 유형에 대해서 알아봅니다.
전역변수를 사용할 때 주의해야 할 점에 대해 이해
엔진에서 사용하고 있는 전역 수준에서 사용되는 변수 혹은 클래스들을 확인해보고 어떤 식으로 수집하고 사용하는지 확인해 봅니다. (SiteModels)



6. 메모리 프로파일링 및 최적화
memory_profiler와 같은 도구를 사용하여 코드의 메모리 사용을 분석하고 최적화하는 코드를 작성
엔진에서 작성 중인 SiteModels에 대해서 메모리 프로파일링을 진행
엔진의 특정 (실트론 같은 무거운) 데이터셋을 선정하여 어느 부분이 가장 병목인지 확인해보고 병목이 확인 되었다면, 어떻게 해당 병목을 개선할 수 있는지 시도



7. 메모리 관리 가비지 컬렉션 (Garbage Collection)을 직접 해보고 순환 참조(circular reference) 가 포함된 코드에 대한 이슈를 확인
순환 참조가 발생되는 코드가 가비지 컬렉션이 실행되지 않는 코드를 작성해보고 해당 python 스크립트가 실행되기 전의 메모리 사용량과 순환 참조 생성 후 순환 참조가 여러 번 생성된 후의 메모리 사용량을 확인합니다.
해당 메모리의 변화량을 다양한 도구를 활용하여 직접 눈으로 확인합니다. (리눅스: htop, 윈도우: 작업관리자 등등)



8. Python의 메모리 관리와 공간 할당
스택 (Stack), 힙 (Heap), 정적 영역 (Static Area)와 같은 영역에 어떤 것들이 저장되는 지 이해하고,
해당 영역들에 저장된 대상이 어떻게 가비지 콜렉션이 되는지 이해
해당 내용을 PPT로 작성하여 다른 개발자에게 설명


