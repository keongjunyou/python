정수형 (Integer)

1. 정수형으로 표현할 수 있는 데이터의 범위
   임의 정밀도 : python int는 크기에 제한이 없고 자동으로 필요한 메모리를 할당. 따라서 오버플로우가 발생하지 않음
   자동 형변환 : 다른 언어는 int 범위를 초과하면 long 또는 BigInt로 명시적으로 변환해야 하지만 python은 자동으로 처리
   *오버플로우 : 정수의 값이 증가하면서 허용된 가장 큰 값보다 더 커져서 실제로 저장되는 값은 아주 작은 수이거나 음수가 되어서 프로그램이 예기치 않게 동작되는 오류

2. python 정수형과 다른 언어의 정수형의 차이
   python : python 정수형은 임의 정밀도(arbitrary precision)를 지원하여 메모리가 허용하는 한, 어떤 크기의 정수도 표현 가능. 따라서 정수형의 최대 값이나 최소 값에 제한이 없음
   다른 언어와 비교 : 많은 프로그래밍 언어는 정수형에 고정된 비트 수를 할당해 정수의 범위를 제한
   - C/C++ : int는 일반적으로 32비트로, -2,147,483,648에서 2,147,483,647까지 표현 가능
   - Java : int는 32비트, long은 64비트로, -9,223,372,036,854,775,808에서 9,223,372,036,854,775,807까지 표현 가능
   - JavaScript : 정수는 2^53 - 1에서 -2^53 + 1까지 표현 가능

3. 정수형의 불변성(Immutability) 을 메모리 할당 관점에서 이해
   메모리 할당 관점 : python 에서 정수는 불변 객체. 변경 시 새로운 객체 생성.
   메모리 할당 관점에서 정수의 값을 변경하면 새로운 메모리 주소가 할당되고 원래 객체는 가비지 컬렉션을 통해 회수



실수형 (Floating-Point)

1. 실수형의 불변성(Immutability) 을 메모리 할당 관점에서 이해
   메모리 할당 관점 : 실수형도 불변 객체로, 값을 변경하면 새로운 객체 생성. 메모리 주소가 달라지며 기존 객체는 가비지 컬렉션의 대상 되어 정수형과 동일하게 작동

2. 정밀도 및 오차 : 정밀도 한계 측면에서의 특징 (부동 소수점 연산에서 계산 오류가 발생하는 이유)
   정밀도 한계 : 부동 소수점 연산은 근사치 계산을 사용하기 때문에 미세한 오차 발생 가능.   예) 0.1 + 0.2는 0.30000000000000004로 계산
   오차 발생 이유 : 컴퓨터는 이진수로 데이터를 처리하여 일부 소수점 값은 이진수로 정확하게 표현되지 않기 때문에 근사값으로 저장되어 계산 시 오차 발생

3. 부동 소수점 타입(float) 계산 오류 해결하기 위해 보다 정확한 소수점 연산을 지원하는 자료형
   Decimal 클래스 : python의 decimal 모듈은 더 높은 정확도를 제공하는 소수점 연산을 지원. decimal.Decimal 객체는 임의의 정밀도를 가질 수 있고 부동 소수점 연산의 오차 문제 완화

   from decimal import Decimal, getcontext
   getcontext().prec = 10  # Set precision to 10 decimal places
   result = Decimal('0.1') + Decimal('0.2')
   print(result)  # Outputs: 0.3

4. 정확한 소수점 연산을 위해 사용되는 라이브러리의 문제
   속도 문제 : decimal 모듈은 정확도는 높지만 부동 소수점보다 느리므로 성능이 중요한 상황에서는 부적합
   사용 불편 : Decimal 객체를 사용하려면 모든 숫자 연산을 Decimal로 처리해야 하는데, 이렇게 되면 코드의 가독성 저하 및 사용 불편

5. 우리 엔진 관점에서 소수점 처리에 대해 본인의 의견을 작성하기
   엔진의 속도면에서는 부동소수점이 유리해보임
   현재 엔진에서의 소수점은 4자리까지만 표현되는 것으로 알고 있고, 따라서 극한으로 정확한 소수점 (예:9~10 째 자리)까지 표현할 필요가 있을까에 대한 의견
   하지만 common 폴더의 calculator.py 에 Decimal 객체를 사용하는 것으로 보아 정확한 계산이 필요할 시에 해당 객체를 사용하고 그렇지 않다면 부동 소수점을 사용해도 될것 같다는 생각



삼항 연산자 (조건부 표현식, conditional expression)

1. 삼항 연산자에 대한 기초적인 사용법
   삼항 연산자는 하나의 줄에 조건문을 간단하게 표현할 수 있는 방법을 제공, python 에서는 'a if condition else b'의 형태로 사용

   기초적인 사용법
   result = a if condition else b
   a: 조건이 참일 때의 값
   condition: 평가할 조건
   b: 조건이 거짓일 때의 값



2. 삼항 연산자의 가독성을 높이는 케이스와 가독성을 해칠 수 있는 케이스에 대해 이해하기

   가독성을 높이는 케이스 - 짧고 간결한 조건문에 유용
   조건이 간단하고 한눈에 이해될 수 있는 경우, 삼항 연산자는 코드의 간결함과 가독성을 동시에 제공
   age = 18
   status = "adult" if age >= 18 else "minor"
   print(status)


   가독성을 해칠 수 있는 케이스 - 조건문이 복잡하거나 중첩된 경우, 하나의 줄에 모두 넣으면 가독성이 떨어짐
   다음 예제는 이해하기 어렵고, 읽는 사람이 코드의 의도를 쉽게 파악할 수 없음.
   result = "A" if (x > y and x > z) else ("B" if y > z else "C")

   대신 if-else 문을 사용하는게 더 가독성이 좋음
   if x > y and x > z:
       result = "A"
   elif y > z:
       result = "B"
   else:
       result = "C"



3. 삼항 연산자를 사용함에 있어서 본인의 생각과 팀에서는 어떻게 해야 하는지 의견을 작성하기
   코드가 길어지는 메소드가 많기 때문에 복잡한 연산을 수행하는게 아니라면, 삼항 연산자를 사용해 코드 길이를 줄이고 간단하게 표현할 수 있다는 점에서 적절하다고 생각
   하지만 여러 사람들이 코드를 보고 이해해야 되기 때문에 조금이라도 복잡하거나 중첩된 조건문을 사용해야 되는 상황이면 삼항 연산자 사용을 지양 해야된다고 생각



f 문자열 포맷팅

1. 다른 언어와의 차이점 (서로 다른 자료형의 문자열 포맷팅)
   Python의 f 문자열은 간결하고 읽기 쉬운 문자열 포맷팅 방법
   다양한 데이터 타입을 손쉽게 문자열로 변환할 수 있고 다른 언어와는 차이점이 있다.

   # python
   name = "Alice"
   age = 30
   height = 5.5
   formatted_string = f"Name: {name}, Age: {age}, Height: {height}"
   print(formatted_string)  # 출력: Name: Alice, Age: 30, Height: 5.5

   # java
   String name = "Alice";
   int age = 30;
   double height = 5.5;
   String formattedString = String.format("Name: %s, Age: %d, Height: %.1f", name, age, height);
   System.out.println(formattedString); // 출력: Name: Alice, Age: 30, Height: 5.5

   # javascript
   let name = "Alice";
   let age = 30;
   let height = 5.5;
   let formattedString = Name: ${name}, Age: ${age}, Height: ${height};
   console.log(formattedString); // 출력: Name: Alice, Age: 30, Height: 5.5

   다른 언어와의 차이점
   python: f-string은 {} 안에 변수나 표현식을 직접 삽입해 간결하게 문자열 포맷
   java: String.format 메서드 사용
   javascript: 템플릿 리터럴 사용



자료형의 타입 구분 (1차)

1. 원시 타입과 참조 타입의 차이점
   원시 타입 (Primitive Type): 기본적인 데이터 형식으로 고정된 크기 가짐  (예: int, float, char, boolean, ...)
   참조 타입 (Reference Type): 데이터가 저장된 메모리 주소를 참조하는 형식으, 크기가 가변적 (예: List, Dict, Object, ...)

   원시 타입
   데이터 크기: 고정된 크기를 가짐
   메모리 저장: 변수에 실제 값이 저장
   변수 비교: 변수 비교 시 실제 값을 비교

   x = 5
   y = x
   y = 10
   print(x)  # 출력: 5 (x와 y는 독립적인 값을 가짐)


   참조 타입
   데이터 크기: 크기가 가변적
   메모리 저장: 변수에 데이터가 저장된 메모리 주소가 저장
   변수 비교: 변수 비교 시 메모리 주소를 비교

   list1 = [1, 2, 3]
   list2 = list1
   list2.append(4)
   print(list1)  # 출력: [1, 2, 3, 4] (list1과 list2는 동일한 메모리 주소를 참조)



2. 원시 타입과 참조 타입은 메모리 공간을 어떻게 사용하는지

   원시 타입의 메모리 사용
   원시 타입 변수는 스택(Stack) 메모리에 실제 값을 저장. 크기가 고정되어 있고 직접 접근 빠름
   # Python 예제 (원시 타입 변수)
   x = 42           # x는 스택에 42를 저장
   print(id(x))     # x의 메모리 주소 출력


   참조 타입의 메모리 사용
   참조 타입 변수는 힙(Heap) 메모리에 데이터를 저장하고, 변수는 데이터가 저장된 메모리 주소를 스택에 저장
   # Python 예제 (참조 타입 변수)
   my_list = [1, 2, 3]     # my_list는 힙 메모리에 리스트를 저장하고, 그 주소를 스택에 저장
   print(id(my_list))      # my_list의 메모리 주소 출력
