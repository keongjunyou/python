정수형 (Integer)

1. 정수형으로 표현할 수 있는 데이터의 범위
   임의 정밀도 : python int는 크기에 제한이 없고 자동으로 필요한 메모리를 할당. 따라서 오버플로우가 발생하지 않음
   자동 형변환 : 다른 언어는 int 범위를 초과하면 long 또는 BigInt로 명시적으로 변환해야 하지만 python은 자동으로 처리
   *오버플로우 : 정수의 값이 증가하면서 허용된 가장 큰 값보다 더 커져서 실제로 저장되는 값은 아주 작은 수이거나 음수가 되어서 프로그램이 예기치 않게 동작되는 오류

2. python 정수형과 다른 언어의 정수형의 차이
   python : python 정수형은 임의 정밀도(arbitrary precision)를 지원하여 메모리가 허용하는 한, 어떤 크기의 정수도 표현 가능. 따라서 정수형의 최대 값이나 최소 값에 제한이 없음
   다른 언어와 비교 : 많은 프로그래밍 언어는 정수형에 고정된 비트 수를 할당해 정수의 범위를 제한
   - C/C++ : int는 일반적으로 32비트로, -2,147,483,648에서 2,147,483,647까지 표현 가능
   - Java : int는 32비트, long은 64비트로, -9,223,372,036,854,775,808에서 9,223,372,036,854,775,807까지 표현 가능
   - JavaScript : 정수는 2^53 - 1에서 -2^53 + 1까지 표현 가능

3. 정수형의 불변성(Immutability) 을 메모리 할당 관점에서 이해
   메모리 할당 관점 : python 에서 정수는 불변 객체. 변경 시 새로운 객체 생성.
   메모리 할당 관점에서 정수의 값을 변경하면 새로운 메모리 주소가 할당되고 원래 객체는 가비지 컬렉션을 통해 회수



실수형 (Floating-Point)

1. 실수형의 불변성(Immutability) 을 메모리 할당 관점에서 이해
   메모리 할당 관점 : 실수형도 불변 객체로, 값을 변경하면 새로운 객체 생성. 메모리 주소가 달라지며 기존 객체는 가비지 컬렉션의 대상 되어 정수형과 동일하게 작동

2. 정밀도 및 오차 : 정밀도 한계 측면에서의 특징 (부동 소수점 연산에서 계산 오류가 발생하는 이유)
   정밀도 한계 : 부동 소수점 연산은 근사치 계산을 사용하기 때문에 미세한 오차 발생 가능.   예) 0.1 + 0.2는 0.30000000000000004로 계산
   오차 발생 이유 : 컴퓨터는 이진수로 데이터를 처리하여 일부 소수점 값은 이진수로 정확하게 표현되지 않기 때문에 근사값으로 저장되어 계산 시 오차 발생

3. 부동 소수점 타입(float) 계산 오류 해결하기 위해 보다 정확한 소수점 연산을 지원하는 자료형
   Decimal 클래스 : python의 decimal 모듈은 더 높은 정확도를 제공하는 소수점 연산을 지원. decimal.Decimal 객체는 임의의 정밀도를 가질 수 있고 부동 소수점 연산의 오차 문제 완화

   from decimal import Decimal, getcontext
   getcontext().prec = 10  # Set precision to 10 decimal places
   result = Decimal('0.1') + Decimal('0.2')
   print(result)  # Outputs: 0.3

4. 정확한 소수점 연산을 위해 사용되는 라이브러리의 문제
   속도 문제 : decimal 모듈은 정확도는 높지만 부동 소수점보다 느리므로 성능이 중요한 상황에서는 부적합
   사용 불편 : Decimal 객체를 사용하려면 모든 숫자 연산을 Decimal로 처리해야 하는데, 이렇게 되면 코드의 가독성 저하 및 사용 불편

5. 우리 엔진 관점에서 소수점 처리에 대해 본인의 의견을 작성하기
   엔진의 속도면에서는 부동소수점이 유리해보임
   현재 엔진에서의 소수점은 4자리까지만 표현되는 것으로 알고 있고, 따라서 극한으로 정확한 소수점 (예:9~10 째 자리)까지 표현할 필요가 있을까에 대한 의견
   하지만 common 폴더의 calculator.py 에 Decimal 객체를 사용하는 것으로 보아 정확한 계산이 필요할 시에 해당 객체를 사용하고 그렇지 않다면 부동 소수점을 사용해도 될것 같다는 생각
